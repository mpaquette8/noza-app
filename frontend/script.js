// Configuration API
const API_BASE_URL = window.location.hostname.includes('vercel.app') 
  ? 'https://hermes-app.up.railway.app/api'
  : window.location.origin + '/api';

function initializeLucide() {
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    } else {
        console.warn('Lucide icons not loaded');
    }
}

// √âtat de l'application
let currentCourse = null;
let history = JSON.parse(localStorage.getItem('noza-history') || '[]');

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    loadHistory();
    initializeLucide();
});

function initializeApp() {
    // Vos event listeners existants...
    document.getElementById('generateBtn').addEventListener('click', generateCourse);
    document.getElementById('generateQuiz').addEventListener('click', generateQuiz);
    document.getElementById('copyContent').addEventListener('click', copyContent);
    document.getElementById('exportPdf').addEventListener('click', exportPdf);
    document.getElementById('exportDocx').addEventListener('click', exportDocx);
    document.getElementById('randomSubjectBtn').addEventListener('click', generateRandomSubject);
    
    // Chat interface
    const chatInput = document.getElementById('chatInput');
    const chatSendBtn = document.getElementById('chatSendBtn');
    
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            askQuestion();
        }
    });
    
    chatSendBtn.addEventListener('click', askQuestion);

    // Auto-resize chat input
    chatInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });

    // Ajouter le bouton d'effacement du chat
    addClearChatButton();

    // Setup form controls
    setupFormControls();
}

async function generateCourse() {
    const subject = document.getElementById('subject').value.trim();
    const level = document.querySelector('input[name="level"]:checked')?.value;
    const length = document.querySelector('.length-btn.active')?.dataset.length;

    if (!subject) {
        showNotification('Veuillez entrer un sujet pour le cours', 'error');
        return;
    }

    if (!level || !length) {
        showNotification('Veuillez s√©lectionner le niveau et la longueur', 'error');
        return;
    }

    // √âtat de chargement
    const generateBtn = document.getElementById('generateBtn');
    generateBtn.disabled = true;
    generateBtn.innerHTML = '<div class="loading-spinner"></div>G√©n√©ration en cours...';

    try {
        const response = await fetch(`${API_BASE_URL}/generate-course`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ subject, level, length })
        });

        const data = await response.json();

        if (data.success) {
            currentCourse = data.course;
            displayCourse(data.course);
            addToHistory(data.course);
            showNotification('Cours g√©n√©r√© avec succ√®s !', 'success');
        } else {
            throw new Error(data.error || 'Erreur lors de la g√©n√©ration');
        }

    } catch (error) {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la g√©n√©ration du cours: ' + error.message, 'error');
    } finally {
        // Remettre le bouton en √©tat normal
        generateBtn.disabled = false;
        generateBtn.innerHTML = '<i data-lucide="sparkles"></i>G√©n√©rer le cours';
        initializeLucide();
    }
}

async function askQuestion() {
    const chatInput = document.getElementById('chatInput');
    const question = chatInput.value.trim();

    if (!question) {
        showNotification('Veuillez saisir une question', 'error');
        return;
    }

    // Afficher les messages
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.style.display = 'block';

    // Cr√©er un √©l√©ment de question
    const questionElement = createMessageElement(question, 'user');
    appendToChat(questionElement);

    // Nettoyer l'input
    chatInput.value = '';
    chatInput.style.height = 'auto';

    // D√©sactiver les contr√¥les pendant la g√©n√©ration
    const chatSendBtn = document.getElementById('chatSendBtn');
    chatSendBtn.disabled = true;
    chatInput.disabled = true;

    // Afficher le typing indicator
    const typingElement = createTypingIndicator();
    appendToChat(typingElement);

    try {
        // R√©cup√©rer le niveau s√©lectionn√©
        const selectedLevel = document.querySelector('input[name="level"]:checked')?.value || 'intermediate';
        
        // Pr√©parer les donn√©es pour l'API
        const requestData = {
            question: question,
            level: selectedLevel,
            questionType: 'auto' // D√©tection automatique du type
        };

        // Ajouter le contenu du cours s'il existe
        if (currentCourse && currentCourse.content) {
            requestData.courseContent = currentCourse.content;
        }

        const response = await fetch(`${API_BASE_URL}/ask-question`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        });

        const data = await response.json();

        // Retirer le typing indicator
        typingElement.remove();

        if (data.success) {
            // Cr√©er la r√©ponse avec des m√©tadonn√©es
            const answerElement = createEnhancedMessageElement(
                data.answer, 
                'assistant', 
                {
                    questionType: data.questionType,
                    level: data.level
                }
            );
            appendToChat(answerElement);

            // Sugg√©rer des questions de suivi si c'est une question g√©n√©rale
            if (data.questionType === 'general' && currentCourse) {
                setTimeout(() => {
                    suggestFollowUpQuestions();
                }, 2000);
            }
        } else {
            throw new Error(data.error || 'Erreur lors de la g√©n√©ration de la r√©ponse');
        }

    } catch (error) {
        typingElement.remove();
        console.error('Erreur:', error);
        
        // R√©ponse d'erreur plus intelligente
        const errorMessage = getIntelligentErrorMessage(error.message);
        const errorElement = createMessageElement(errorMessage, 'error');
        appendToChat(errorElement);
        
        showNotification('Erreur lors de la g√©n√©ration de la r√©ponse', 'error');
    } finally {
        // R√©activer les contr√¥les
        chatSendBtn.disabled = false;
        chatInput.disabled = false;
        chatInput.focus();
        initializeLucide();
    }
}

async function generateQuiz() {
    if (!currentCourse) {
        showNotification('G√©n√©rez d\'abord un cours pour cr√©er un quiz', 'error');
        return;
    }

    const quizBtn = document.getElementById('generateQuiz');
    quizBtn.disabled = true;
    quizBtn.innerHTML = '<div class="loading-spinner"></div>G√©n√©ration...';

    try {
        const response = await fetch(`${API_BASE_URL}/generate-quiz`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                courseContent: currentCourse.content
            })
        });

        const data = await response.json();

        if (data.success) {
            displayQuiz(data.quiz);
            showNotification('Quiz g√©n√©r√© avec succ√®s !', 'success');
        } else {
            throw new Error(data.error || 'Erreur lors de la g√©n√©ration du quiz');
        }

    } catch (error) {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la g√©n√©ration du quiz: ' + error.message, 'error');
        
        // En cas d'erreur, vider le quiz section
        const quizSection = document.getElementById('quizSection');
        if (quizSection) {
            quizSection.style.display = 'none';
            quizSection.innerHTML = '';
        }
    } finally {
        // Toujours remettre le bouton en √©tat normal
        quizBtn.disabled = false;
        quizBtn.innerHTML = '<i data-lucide="help-circle"></i>Quiz';
        initializeLucide();
    }
}

// Fonctions d'affichage
function displayCourse(course) {
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('courseContent').style.display = 'block';
    document.getElementById('generatedCourse').innerHTML = course.content;
    
    // R√©initialiser le chat
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '';
    chatMessages.style.display = 'none';
    
    // Masquer le quiz s'il √©tait affich√©
    document.getElementById('quizSection').style.display = 'none';
    document.getElementById('quizSection').innerHTML = '';
    
    initializeLucide();
}

function displayQuiz(quiz) {
    const quizSection = document.getElementById('quizSection');
    
    let quizHTML = `
        <div class="quiz-container">
            <div class="quiz-header">
                <h3>üìù Quiz de Compr√©hension</h3>
                <button class="quiz-close-btn" id="quizCloseBtn">
                    <i data-lucide="x"></i>
                </button>
            </div>
    `;
    
    quiz.questions.forEach((q, index) => {
        quizHTML += `
            <div class="quiz-question" data-question="${index}">
                <h4>${index + 1}. ${q.question}</h4>
                <div class="quiz-options">
                    ${q.options.map((option, optIndex) => `
                        <div class="quiz-option" data-question="${index}" data-option="${optIndex}">
                            ${option}
                        </div>
                    `).join('')}
                </div>
                <div class="quiz-explanation" style="display: none;">
                    <strong>‚úÖ R√©ponse correcte :</strong> ${q.options[q.correct]}<br>
                    <strong>üí° Explication :</strong> ${q.explanation}
                </div>
            </div>
        `;
    });
    
    quizHTML += `
            <div class="quiz-score" style="display: none;">
                <h3>üéØ R√©sultat : <span id="scoreText"></span></h3>
                <div class="quiz-actions">
                    <button class="generate-btn" id="resetQuizBtn">
                        <i data-lucide="refresh-cw"></i>
                        Recommencer le Quiz
                    </button>
                    <button class="action-btn" id="closeQuizBtn">
                        <i data-lucide="x"></i>
                        Fermer le Quiz
                    </button>
                </div>
            </div>
        </div>
    `;
    
    quizSection.innerHTML = quizHTML;
    quizSection.style.display = 'block';
    
    // Ajouter les event listeners pour le quiz
    setupQuizListeners(quiz);
    
    // Ajouter les event listeners pour les boutons du quiz
    setupQuizButtonListeners();
    
    // Faire d√©filer vers le quiz
    quizSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    initializeLucide();
}

function setupQuizListeners(quiz) {
    const quizOptions = document.querySelectorAll('.quiz-option');
    let userAnswers = {};
    
    quizOptions.forEach(option => {
        option.addEventListener('click', function() {
            const questionIndex = parseInt(this.dataset.question);
            const optionIndex = parseInt(this.dataset.option);
            
            // D√©s√©lectionner les autres options de cette question
            document.querySelectorAll(`[data-question="${questionIndex}"]`).forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // S√©lectionner cette option
            this.classList.add('selected');
            userAnswers[questionIndex] = optionIndex;
            
            // V√©rifier si toutes les questions ont √©t√© r√©pondues
            if (Object.keys(userAnswers).length === quiz.questions.length) {
                setTimeout(() => showQuizResults(quiz, userAnswers), 500);
            }
        });
    });
}

function setupQuizButtonListeners() {
    // Bouton fermer dans le header
    const quizCloseBtn = document.getElementById('quizCloseBtn');
    if (quizCloseBtn) {
        quizCloseBtn.addEventListener('click', closeQuiz);
    }
    
    // Bouton recommencer
    const resetQuizBtn = document.getElementById('resetQuizBtn');
    if (resetQuizBtn) {
        resetQuizBtn.addEventListener('click', resetQuiz);
    }
    
    // Bouton fermer dans le score
    const closeQuizBtn = document.getElementById('closeQuizBtn');
    if (closeQuizBtn) {
        closeQuizBtn.addEventListener('click', closeQuiz);
    }
}

function showQuizResults(quiz, userAnswers) {
    let correctCount = 0;
    
    quiz.questions.forEach((question, index) => {
        const userAnswer = userAnswers[index];
        const isCorrect = userAnswer === question.correct;
        
        if (isCorrect) correctCount++;
        
        // Marquer les r√©ponses
        const questionOptions = document.querySelectorAll(`[data-question="${index}"]`);
        questionOptions.forEach((option, optIndex) => {
            if (optIndex === question.correct) {
                option.classList.add('correct');
            } else if (optIndex === userAnswer && !isCorrect) {
                option.classList.add('incorrect');
            }
            option.style.pointerEvents = 'none';
        });
        
        // Afficher l'explication
        document.querySelector(`[data-question="${index}"] .quiz-explanation`).style.display = 'block';
    });
    
    // Afficher le score
    // Afficher le score
    const scorePercentage = Math.round((correctCount / quiz.questions.length) * 100);
    const scoreElement = document.getElementById('scoreText');
    if (scoreElement) {
        scoreElement.textContent = `${correctCount}/${quiz.questions.length} (${scorePercentage}%)`;
    }

    const quizScoreElement = document.querySelector('.quiz-score');
    if (quizScoreElement) {
        quizScoreElement.style.display = 'block';
    }

    showNotification(`Quiz termin√© ! Score: ${scorePercentage}%`, 'success');
}

// Fonctions utilitaires
function addToHistory(course) {
    history.unshift(course);
    if (history.length > 10) {
        history = history.slice(0, 10);
    }
    localStorage.setItem('noza-history', JSON.stringify(history));
    updateHistoryDisplay();
}

function loadHistory() {
    updateHistoryDisplay();
}

function updateHistoryDisplay() {
    const historyTab = document.getElementById('historyTab');
    
    if (history.length === 0) {
        historyTab.innerHTML = `
            <div class="empty-state">
                <i data-lucide="history"></i>
                <h3>Aucun historique</h3>
                <p>Vos cours g√©n√©r√©s appara√Ætront ici automatiquement.</p>
            </div>
        `;
    } else {
        historyTab.innerHTML = history.map(course => `
            <div class="history-item" onclick="loadCourseFromHistory('${course.id}')">
                <h4>${course.subject}</h4>
                <p>Niveau: ${course.level} | Longueur: ${course.length}</p>
                <small>${new Date(course.createdAt).toLocaleDateString()}</small>
            </div>
        `).join('');
    }
    
    initializeLucide();
}

function loadCourseFromHistory(courseId) {
    const course = history.find(c => c.id === courseId);
    if (course) {
        currentCourse = course;
        displayCourse(course);
        switchTab('course');
        showNotification('Cours charg√© depuis l\'historique', 'success');
    }
}

// Fonctions d'interface chat
function createMessageElement(content, type) {
    const div = document.createElement('div');
    div.className = `chat-message ${type}`;
    div.innerHTML = `<div class="message-content">${content}</div>`;
    return div;
}

function createTypingIndicator() {
    const div = document.createElement('div');
    div.className = 'chat-message typing';
    div.innerHTML = '<div class="typing-dots"><span></span><span></span><span></span></div>';
    return div;
}

function appendToChat(element) {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.appendChild(element);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Fonctions d'export
function copyContent() {
    if (currentCourse) {
        const textContent = currentCourse.content.replace(/<[^>]*>/g, '');
        navigator.clipboard.writeText(textContent).then(() => {
            showNotification('Contenu copi√© dans le presse-papiers !', 'success');
        }).catch(() => {
            showNotification('Erreur lors de la copie', 'error');
        });
    }
}

function exportPdf() {
    showNotification('Export PDF - Fonctionnalit√© en d√©veloppement', 'error');
}

function exportDocx() {
    showNotification('Export DOCX - Fonctionnalit√© en d√©veloppement', 'error');
}

// Fonctions de navigation
function switchTab(tabName) {
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

    document.querySelectorAll('.tab-content').forEach(content => {
        content.style.display = 'none';
    });
    document.getElementById(`${tabName}Tab`).style.display = 'block';
}

// Configuration des contr√¥les de formulaire
function setupFormControls() {
    // Radio buttons
    document.querySelectorAll('.radio-option').forEach(option => {
        option.addEventListener('click', function() {
            document.querySelectorAll('.radio-option').forEach(o => o.classList.remove('selected'));
            this.classList.add('selected');
            this.querySelector('input[type="radio"]').checked = true;
            
            // Mettre √† jour l'indicateur de niveau du chat
            updateChatLevelIndicator();
        });
    });

    // Length selector
    document.querySelectorAll('.length-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.length-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Tabs
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.dataset.tab;
            switchTab(tabName);
        });
    });
    
    // Initialiser l'indicateur de niveau
    updateChatLevelIndicator();
}

// Syst√®me de notifications
function showNotification(message, type = 'success') {
    // Supprimer les notifications existantes
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notif => notif.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Supprimer automatiquement apr√®s 4 secondes
    setTimeout(() => {
        notification.remove();
    }, 4000);
}

// Base de donn√©es de sujets al√©atoires organis√©s par cat√©gories
const randomSubjects = {
    sciences: [
        "La photosynth√®se et son r√¥le dans l'√©cosyst√®me",
        "Les trous noirs et la relativit√© g√©n√©rale",
        "La m√©canique quantique et le principe d'incertitude",
        "L'√©volution et la s√©lection naturelle",
        "La structure de l'ADN et la g√©n√©tique",
        "Les √©nergies renouvelables et leur fonctionnement",
        "Le r√©chauffement climatique et ses causes",
        "Les neurones et le fonctionnement du cerveau",
        "La th√©orie de la d√©rive des continents",
        "Les propri√©t√©s de l'eau et son cycle naturel"
    ],
    technologie: [
        "Introduction aux algorithmes de machine learning",
        "Les bases de la cryptographie moderne",
        "L'architecture des processeurs modernes",
        "Les r√©seaux neuronaux et l'intelligence artificielle",
        "La blockchain et les cryptomonnaies",
        "Les principes de la cybers√©curit√©",
        "Le d√©veloppement d'applications mobiles",
        "Les bases de donn√©es NoSQL vs SQL",
        "L'informatique quantique et ses applications",
        "Les protocoles de communication Internet"
    ],
    economie: [
        "Le mod√®le d'√©valuation d'actifs financiers (CAPM)",
        "L'inflation et ses m√©canismes √©conomiques",
        "Les march√©s financiers et leur r√©gulation",
        "L'√©conomie comportementale et les biais cognitifs",
        "La th√©orie des jeux en √©conomie",
        "Les cryptomonnaies et l'√©conomie num√©rique",
        "Le commerce international et la mondialisation",
        "Les cycles √©conomiques et les r√©cessions",
        "L'√©conomie de l'environnement et le d√©veloppement durable",
        "Les politiques mon√©taires des banques centrales"
    ],
    philosophie: [
        "L'√©thique de l'intelligence artificielle",
        "Le libre arbitre face au d√©terminisme",
        "La philosophie de l'esprit et la conscience",
        "L'existentialisme de Sartre et Camus",
        "L'√©thique m√©dicale et les dilemmes bio√©thiques",
        "La justice sociale selon John Rawls",
        "Le sto√Øcisme et la gestion des √©motions",
        "La philosophie des sciences et l'√©pist√©mologie",
        "L'√©thique environnementale et notre rapport √† la nature",
        "La philosophie politique de Platon √† nos jours"
    ],
    arts: [
        "L'√©volution de l'art moderne au XXe si√®cle",
        "La th√©orie des couleurs et la psychologie visuelle",
        "L'histoire du cin√©ma et ses r√©volutions techniques",
        "La musique classique et ses formes compositionnelles",
        "L'art num√©rique et les nouvelles technologies cr√©atives",
        "L'architecture gothique et ses innovations",
        "La photographie comme art et documentation",
        "Le street art et son impact culturel",
        "L'op√©ra et l'√©volution du spectacle lyrique",
        "La bande dessin√©e comme forme d'expression artistique"
    ],
    histoire: [
        "La r√©volution industrielle et ses cons√©quences sociales",
        "L'Empire romain et ses strat√©gies d'expansion",
        "La Renaissance et l'humanisme europ√©en",
        "Les r√©volutions du XVIIIe si√®cle et leurs id√©ologies",
        "La guerre froide et l'√©quilibre de la terreur",
        "Les civilisations pr√©colombiennes d'Am√©rique",
        "L'abolition de l'esclavage et ses r√©percussions",
        "La d√©colonisation africaine au XXe si√®cle",
        "L'histoire des sciences au Moyen √Çge",
        "Les grandes explorations maritimes europ√©ennes"
    ],
    psychologie: [
        "Les m√©canismes de la m√©moire humaine",
        "La psychologie positive et le bien-√™tre",
        "Les troubles anxieux et leurs traitements",
        "Le d√©veloppement de l'enfant selon Piaget",
        "La psychologie sociale et l'influence du groupe",
        "Les biais cognitifs et la prise de d√©cision",
        "La neuroplasticit√© et l'apprentissage",
        "La psychologie du travail et la motivation",
        "Les √©motions et leur r√©gulation",
        "L'attachement et les relations interpersonnelles"
    ],
    sociologie: [
        "L'impact des r√©seaux sociaux sur la soci√©t√©",
        "Les in√©galit√©s sociales et la stratification",
        "La sociologie urbaine et les m√©tropoles modernes",
        "L'√©volution de la famille dans les soci√©t√©s occidentales",
        "Les mouvements sociaux et le changement",
        "La mondialisation culturelle et l'identit√©",
        "L'√©ducation et la reproduction sociale",
        "La sociologie du travail √† l'√®re num√©rique",
        "Les migrations contemporaines et l'int√©gration",
        "La consommation et la soci√©t√© de march√©"
    ]
};

// Fonction pour obtenir un sujet al√©atoire
function getRandomSubject() {
    const categories = Object.keys(randomSubjects);
    const randomCategory = categories[Math.floor(Math.random() * categories.length)];
    const subjects = randomSubjects[randomCategory];
    const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];
    
    return {
        subject: randomSubject,
        category: randomCategory
    };
}

// Fonction pour g√©n√©rer un sujet al√©atoire avec animation
function generateRandomSubject() {
    const randomBtn = document.getElementById('randomSubjectBtn');
    const subjectTextarea = document.getElementById('subject');
    
    // D√©sactiver le bouton et ajouter l'animation
    randomBtn.disabled = true;
    randomBtn.classList.add('spinning');
    
    // Simuler un d√©lai pour l'effet visuel
    setTimeout(() => {
        const randomData = getRandomSubject();
        
        // Effet de typing pour remplir le textarea
        typewriterEffect(subjectTextarea, randomData.subject, () => {
            // R√©activer le bouton
            randomBtn.disabled = false;
            randomBtn.classList.remove('spinning');
            
            // Afficher une notification avec la cat√©gorie
            showNotification(`Sujet al√©atoire g√©n√©r√© (${randomData.category})`, 'success');
        });
        
    }, 800);
}

// Effet de machine √† √©crire pour le textarea
function typewriterEffect(element, text, callback) {
    element.value = '';
    let i = 0;
    
    function typeWriter() {
        if (i < text.length) {
            element.value += text.charAt(i);
            i++;
            setTimeout(typeWriter, 30); // Vitesse de frappe
        } else if (callback) {
            callback();
        }
    }
    
    typeWriter();
}

// Modifier la fonction initializeApp pour ajouter l'event listener
function initializeAppWithRandomSubject() {
    // Tous vos event listeners existants...
    document.getElementById('generateBtn').addEventListener('click', generateCourse);
    document.getElementById('generateQuiz').addEventListener('click', generateQuiz);
    document.getElementById('copyContent').addEventListener('click', copyContent);
    document.getElementById('exportPdf').addEventListener('click', exportPdf);
    document.getElementById('exportDocx').addEventListener('click', exportDocx);
    
    // Nouveau event listener pour le bouton sujet al√©atoire
    document.getElementById('randomSubjectBtn').addEventListener('click', generateRandomSubject);
    
    // Chat interface
    const chatInput = document.getElementById('chatInput');
    const chatSendBtn = document.getElementById('chatSendBtn');
    
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            askQuestion();
        }
    });
    
    chatSendBtn.addEventListener('click', askQuestion);

    // Auto-resize chat input
    chatInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });

    // Setup form controls
    setupFormControls();
}

// Fonction pour ajouter plus de sujets √† une cat√©gorie (utile pour l'expansion)
function addSubjectsToCategory(category, newSubjects) {
    if (randomSubjects[category]) {
        randomSubjects[category].push(...newSubjects);
    } else {
        randomSubjects[category] = newSubjects;
    }
}

// Fonction pour obtenir des statistiques sur les sujets
function getSubjectsStats() {
    const stats = {};
    let total = 0;
    
    for (const [category, subjects] of Object.entries(randomSubjects)) {
        stats[category] = subjects.length;
        total += subjects.length;
    }
    
    stats.total = total;
    return stats;
}

// Nouvelle fonction pour cr√©er des messages am√©lior√©s
function createEnhancedMessageElement(content, type, metadata = {}) {
    const div = document.createElement('div');
    div.className = `chat-message ${type}`;
    
    let messageHTML = `<div class="message-content">${content}</div>`;
    
    // Ajouter des m√©tadonn√©es visuelles
    if (metadata.questionType || metadata.level) {
        const badges = [];
        
        if (metadata.questionType === 'course-related') {
            badges.push('<span class="message-badge course-badge">üìö Cours</span>');
        } else if (metadata.questionType === 'general') {
            badges.push('<span class="message-badge general-badge">üåê G√©n√©ral</span>');
        }
        
        if (metadata.level) {
            const levelLabels = {
                beginner: 'üü¢ D√©butant',
                intermediate: 'üü° Interm√©diaire', 
                expert: 'üî¥ Expert',
                hybrid: 'üü£ Hybride',
                hybridExpert: 'üî¥ Hybride Expert'
            };
            
            const badgeClass = metadata.level === 'hybridExpert' ? 'hybrid-expert-badge' : 'level-badge';
            badges.push(`<span class="message-badge ${badgeClass}">${levelLabels[metadata.level]}</span>`);
        }
        
        if (badges.length > 0) {
            messageHTML += `<div class="message-badges">${badges.join('')}</div>`;
        }
    }
    
    div.innerHTML = messageHTML;
    return div;
}

// Ajoutez cette fonction pour mettre √† jour l'attribut data-level du chat
function updateChatLevelIndicator() {
    const chatInterface = document.querySelector('.chat-interface');
    const selectedLevel = document.querySelector('input[name="level"]:checked')?.value;
    
    if (chatInterface && selectedLevel) {
        chatInterface.setAttribute('data-level', selectedLevel);
    }
}

// Fonction pour sugg√©rer des questions de suivi
async function suggestFollowUpQuestions() {
    if (!currentCourse) return;

    try {
        const selectedLevel = document.querySelector('input[name="level"]:checked')?.value || 'intermediate';
        
        const response = await fetch(`${API_BASE_URL}/suggest-questions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                courseContent: currentCourse.content,
                level: selectedLevel
            })
        });

        const data = await response.json();

        if (data.success) {
            const suggestionsElement = createSuggestionsElement(data.suggestions);
            appendToChat(suggestionsElement);
        }
    } catch (error) {
        console.error('Erreur suggestions:', error);
    }
}

// Cr√©er un √©l√©ment de suggestions
function createSuggestionsElement(suggestions) {
    const div = document.createElement('div');
    div.className = 'chat-message suggestions';
    
    let suggestionsHTML = `
        <div class="message-content">
            <strong>üí° Questions sugg√©r√©es :</strong>
            <div class="suggestion-buttons">
    `;
    
    suggestions.forEach(suggestion => {
        suggestionsHTML += `
            <button class="suggestion-btn" onclick="askSuggestedQuestion('${suggestion.replace(/'/g, "\\'")}')">
                ${suggestion}
            </button>
        `;
    });
    
    suggestionsHTML += `
            </div>
        </div>
    `;
    
    div.innerHTML = suggestionsHTML;
    return div;
}

// Fonction pour poser une question sugg√©r√©e
function askSuggestedQuestion(question) {
    const chatInput = document.getElementById('chatInput');
    chatInput.value = question;
    askQuestion();
}

// Fonction pour obtenir un message d'erreur intelligent
function getIntelligentErrorMessage(errorMessage) {
    const errorMessages = {
        'fetch': 'Probl√®me de connexion. V√©rifiez votre connexion internet.',
        'timeout': 'La r√©ponse prend trop de temps. Essayez une question plus simple.',
        'rate limit': 'Trop de questions √† la fois. Attendez quelques secondes.',
        'default': 'D√©sol√©, je n\'ai pas pu r√©pondre √† votre question. Essayez de la reformuler.'
    };
    
    for (const [key, message] of Object.entries(errorMessages)) {
        if (errorMessage.toLowerCase().includes(key)) {
            return message;
        }
    }
    
    return errorMessages.default;
}

// Fonction pour effacer l'historique du chat
function clearChatHistory() {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '';
    chatMessages.style.display = 'none';
    showNotification('Historique du chat effac√©', 'success');
}

// Ajouter un bouton pour effacer le chat (√† ajouter dans votre HTML)
function addClearChatButton() {
    const chatInterface = document.querySelector('.chat-interface');
    if (chatInterface && !document.getElementById('clearChatBtn')) {
        const clearButton = document.createElement('button');
        clearButton.id = 'clearChatBtn';
        clearButton.className = 'clear-chat-btn';
        clearButton.innerHTML = '<i data-lucide="trash-2"></i> Effacer';
        clearButton.onclick = clearChatHistory;
        
        const chatInputContainer = document.querySelector('.chat-input-container');
        chatInputContainer.appendChild(clearButton);
    }
}

// Fonction pour fermer le quiz
function closeQuiz() {
    const quizSection = document.getElementById('quizSection');
    if (quizSection) {
        quizSection.style.display = 'none';
        quizSection.innerHTML = '';
        showNotification('Quiz ferm√©', 'success');
    }
}

// Fonction pour recommencer le quiz
async function resetQuiz() {
    if (!currentCourse) {
        showNotification('Aucun cours disponible pour g√©n√©rer un quiz', 'error');
        return;
    }
    
    // D√©sactiver le bouton et montrer l'√©tat de chargement
    const resetBtn = document.getElementById('resetQuizBtn');
    if (resetBtn) {
        resetBtn.disabled = true;
        resetBtn.innerHTML = '<div class="loading-spinner"></div>G√©n√©ration...';
    }
    
    // Afficher l'√©tat de chargement dans le quiz section
    const quizSection = document.getElementById('quizSection');
    if (quizSection) {
        quizSection.innerHTML = `
            <div class="quiz-container">
                <div class="quiz-header">
                    <h3>üìù G√©n√©ration d'un nouveau quiz...</h3>
                </div>
                <div class="loading" style="padding: 40px; text-align: center;">
                    <div class="loading-spinner"></div>
                    Cr√©ation de nouvelles questions...
                </div>
            </div>
        `;
        quizSection.style.display = 'block';
    }

    try {
        const response = await fetch(`${API_BASE_URL}/generate-quiz`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                courseContent: currentCourse.content
            })
        });

        const data = await response.json();

        if (data.success) {
            displayQuiz(data.quiz);
            showNotification('Nouveau quiz g√©n√©r√© avec succ√®s !', 'success');
        } else {
            throw new Error(data.error || 'Erreur lors de la g√©n√©ration du quiz');
        }

    } catch (error) {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la g√©n√©ration du nouveau quiz: ' + error.message, 'error');
        
        // En cas d'erreur, fermer le quiz
        closeQuiz();
    }
}

// Fonctions globales pour l'acc√®s depuis HTML
window.loadCourseFromHistory = loadCourseFromHistory;
window.resetQuiz = resetQuiz;
window.closeQuiz = closeQuiz;
window.askSuggestedQuestion = askSuggestedQuestion;
window.clearChatHistory = clearChatHistory;

// S'assurer que les fonctions sont bien attach√©es aux √©v√©nements
document.addEventListener('DOMContentLoaded', function() {
    // Les fonctions sont d√©j√† dans le scope global via window
});
