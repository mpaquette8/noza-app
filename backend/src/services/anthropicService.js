// backend/src/services/anthropicService.js
const Anthropic = require('@anthropic-ai/sdk');
const { logger } = require('../utils/helpers');
const {
  DURATIONS,
  TEACHER_TYPES,
  VULGARIZATION_LEVELS,
  DEFAULT_TEACHER_TYPE
} = require('../utils/constants');

const MAX_COURSE_LENGTH = 6000;
const ERROR_CODES = {
  IA_TIMEOUT: 'IA_TIMEOUT',
  QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',
  IA_ERROR: 'IA_ERROR',
  IA_OVERLOADED: 'IA_OVERLOADED'
};

const OFFLINE_MESSAGE = 'Service IA indisponible';
const REQUEST_TIMEOUT = 30 * 1000; // 30s timeout for IA requests

// Mapping duration presets to approximate word counts
const DURATION_TO_WORDS = {
  [DURATIONS.SHORT]: 750,
  [DURATIONS.MEDIUM]: 2250,
  [DURATIONS.LONG]: 4200
};

// Instructions d√©taill√©es selon le type de prof
const TEACHER_STYLE_INSTRUCTIONS = {
  [TEACHER_TYPES.DIRECT]: {
    approach: "Synth√®se imm√©diate avec conclusion d'abord, sans d√©tours",
    structure: "Essentiel ‚Üí Pourquoi ‚Üí Comment (pyramide invers√©e)",
    language: "Factuel, pr√©cis, sans fioritures, phrases courtes",
    examples: "Points cl√©s hi√©rarchis√©s, m√©taphores quotidiennes simples",
    opening: "Commence par 'En r√©sum√© :' ou 'L'essentiel :'"
  },
  [TEACHER_TYPES.STRUCTURE]: {
    approach: "Construction progressive et m√©thodique bloc par bloc",
    structure: "Fondations ‚Üí D√©veloppement ‚Üí Consolidation (s√©quentiel)",
    language: "P√©dagogique avec √©tapes num√©rot√©es et transitions",
    examples: "Analogies de construction, v√©rifications interm√©diaires",
    opening: "Commence par un plan ou '√âtape 1 :'"
  },
  [TEACHER_TYPES.IMMERSIF]: {
    approach: "Plong√©e narrative dans l'univers du sujet avec storytelling",
    structure: "Mise en situation ‚Üí D√©couverte ‚Üí R√©v√©lation (dramatique)",
    language: "Narratif avec analogies cr√©atives et questions intriguantes",
    examples: "Histoires, myst√®res, d√©couvertes progressives",
    opening: "Commence par une situation intrigante ou un myst√®re"
  }
};

// Instructions selon l'intensit√© p√©dagogique
const INTENSITY_INSTRUCTIONS = {
  'rapid_simple': {
    vulgarization: VULGARIZATION_LEVELS.GENERAL_PUBLIC,
    duration: DURATIONS.SHORT,
    instruction: "Cours concis et accessible : explique simplement, va √† l'essentiel, environ 750 mots."
  },
  'balanced': {
    vulgarization: VULGARIZATION_LEVELS.ENLIGHTENED,
    duration: DURATIONS.MEDIUM,
    instruction: "Cours √©quilibr√© : bon niveau de d√©tail avec accessibilit√©, environ 2250 mots."
  },
  'deep_expert': {
    vulgarization: VULGARIZATION_LEVELS.EXPERT,
    duration: DURATIONS.LONG,
    instruction: "Cours approfondi : analyse d√©taill√©e avec vocabulaire technique, environ 4200 mots."
  }
};

class AnthropicService {
  constructor() {
    this.offline = false;
    if (!process.env.ANTHROPIC_API_KEY) {
      logger.warn('ANTHROPIC_API_KEY manquante, mode offline activ√©');
      this.offline = true;
      return;
    }
    try {
      this.client = new Anthropic({
        apiKey: process.env.ANTHROPIC_API_KEY,
      });
    } catch (error) {
      logger.error('√âchec de connexion au service Anthropic', error);
      this.offline = true;
    }
  }

  isOffline() {
    return this.offline;
  }

  getOfflineMessage() {
    return OFFLINE_MESSAGE;
  }

  // Attempt a lightweight request to see if the service is reachable again
  async recoverIfOffline() {
    if (!this.offline || !this.client) {
      return false;
    }
    try {
      await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 1,
        messages: [{ role: 'user', content: 'ping' }]
      }, 5000);
      this.offline = false;
      logger.success('Service Anthropic r√©tabli');
      return true;
    } catch (error) {
      logger.warn('Tentative de reconnexion Anthropic √©chou√©e');
      return false;
    }
  }

  // Wrapper around Anthropic API with timeout support and retry on overload
  async sendWithTimeout(options, timeoutMs = REQUEST_TIMEOUT, retryDelays = [1000, 2000, 4000]) {
    for (let attempt = 0; ; attempt++) {
      const controller = new AbortController();
      const timer = setTimeout(() => controller.abort(), timeoutMs);
      try {
        return await this.client.messages.create(
          options,
          { signal: controller.signal }
        );
      } catch (error) {
        const isOverloaded =
          error?.response?.status === 529 ||
          error?.response?.data?.type === 'overloaded_error';
        if (attempt < retryDelays.length && isOverloaded) {
          await new Promise(res => setTimeout(res, retryDelays[attempt]));
          continue;
        }
        throw error;
      } finally {
        clearTimeout(timer);
      }
    }
  }


  // Obtenir la contrainte de longueur selon la dur√©e souhait√©e
  getDurationConstraint(duration) {
    const words = DURATION_TO_WORDS[duration];
    return words ? `Le cours doit contenir environ ${words} mots.` : '';
  }

  getAdaptiveInstructions(teacherType, intensity = 'balanced') {
    const teacher =
      TEACHER_STYLE_INSTRUCTIONS[teacherType] ||
      TEACHER_STYLE_INSTRUCTIONS[DEFAULT_TEACHER_TYPE];
    const intensityConfig =
      INTENSITY_INSTRUCTIONS[intensity] || INTENSITY_INSTRUCTIONS['balanced'];

    return {
      teacherApproach: teacher.approach,
      teacherStructure: teacher.structure,
      teacherLanguage: teacher.language,
      teacherExamples: teacher.examples,
      intensityInstruction: intensityConfig.instruction,
      vulgarization: intensityConfig.vulgarization,
      duration: intensityConfig.duration
    };
  }

  createPrompt(subject, intensity = 'balanced', teacherType) {
    const adaptive = this.getAdaptiveInstructions(teacherType, intensity);

    const conversationalPrompt = `Tu es un expert p√©dagogique conversationnel. Cr√©e un cours dans un style moderne d'IA conversationnelle (type ChatGPT/Claude).

STYLE DE R√âPONSE OBLIGATOIRE :
- Format conversationnel naturel et engageant
- Utilise des √©mojis pour structurer (üìö üéØ üí° ‚ú® üîç)
- Paragraphes courts et respirants (3-4 lignes max)
- Transitions fluides entre les sections
- Ton accessible mais expert
- FORMULES : Utilise la notation LaTeX claire et centr√©e
- TABLEAUX : Format HTML avec en-t√™tes distinctes et lignes altern√©es
- Pas de HTML brut sauf pour formules et tableaux

PROFIL P√âDAGOGIQUE :
- Approche : ${adaptive.teacherApproach}
- Structure : ${adaptive.teacherStructure}
- Langage : ${adaptive.teacherLanguage}
- Exemples : ${adaptive.teacherExamples}
- Contraintes : ${adaptive.intensityInstruction}

STRUCTURE OBLIGATOIRE :

# [Titre accrocheur du cours]

## üéØ Introduction
[Paragraphe d'accroche engageant qui explique pourquoi ce sujet est important]

## üìö L'essentiel √† comprendre
[Explication des concepts cl√©s, divis√©e en sous-sections courtes]

### Point cl√© 1
[Explication claire et concise]

### Point cl√© 2
[Explication claire et concise]

## üí° Exemple concret
[Illustration pratique avec formules bien format√©es si n√©cessaire]

**Formule principale :**
\`\`\`
C = S‚ÇÄ ¬∑ N(d‚ÇÅ) - K ¬∑ e^(-rT) ¬∑ N(d‚ÇÇ)
\`\`\`

## üìä Variables importantes
| Variable | Signification | Unit√© |
|----------|---------------|-------|
| C | Prix du call | monnaie |
| S‚ÇÄ | Prix actuel de l'actif | monnaie |
| K | Prix d'exercice | monnaie |

## ‚ú® Points √† retenir
- [Point important 1]
- [Point important 2]
- [Point important 3]

## üîç Pour aller plus loin
**Questions de r√©flexion :**
1. [Question qui pousse √† r√©fl√©chir]
2. [Question qui pousse √† r√©fl√©chir]

**Approfondissements sugg√©r√©s :**
- [Suggestion 1]
- [Suggestion 2]

---

CONSIGNES STRICTES :
- Respecte scrupuleusement le profil p√©dagogique d√©fini
- Adapte le niveau selon l'intensit√© demand√©e
- Utilise un langage naturel et conversationnel
- Pour les FORMULES : utilise des blocs \`\`\`code\`\`\` avec notation claire
- Pour les TABLEAUX : utilise le format markdown | col1 | col2 |
- √âvite les phrases trop longues
- Ajoute des transitions entre les sections
- Garde un ton bienveillant et expert

Sujet √† traiter : "${subject}"`;

    return conversationalPrompt;
  }


// G√©n√©rer un cours
  async generateCourse(subject, intensity = 'balanced', teacherType) {
    if (this.offline) {
      return this.getOfflineMessage();
    }

    const validTeacherType = Object.values(TEACHER_TYPES).includes(teacherType)
      ? teacherType
      : DEFAULT_TEACHER_TYPE;

    try {
      const prompt = this.createPrompt(subject, intensity, validTeacherType);

      logger.info('G√©n√©ration cours', { subject, intensity, teacherType: validTeacherType });

      const response = await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: MAX_COURSE_LENGTH,
        temperature: 0.2,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      const courseContent = response.content[0].text;
      logger.success('Cours g√©n√©r√©', { length: courseContent.length });

      return courseContent;
    } catch (error) {
      const code = this.categorizeError(error);
      logger.error('Erreur g√©n√©ration cours', { code, error });
      if (code === ERROR_CODES.IA_ERROR) {
        this.offline = true;
        const err = new Error(this.getOfflineMessage());
        err.code = code;
        err.offline = true;
        throw err;
      }
      const err = new Error('Erreur lors de la g√©n√©ration du cours');
      err.code = code;
      throw err;
    }
  }

  // R√©pondre √† une question
  async answerQuestion(question, courseContent = null, level = 'intermediate') {
    if (this.offline) {
      return { answer: this.getOfflineMessage(), questionType: 'general', level };
    }
    try {
      const levelInstructions = {
        beginner: "R√©ponds de mani√®re tr√®s simple, sans jargon technique, comme si tu t'adressais √† un d√©butant complet. Utilise des analogies simples et du vocabulaire accessible.",
        intermediate: "R√©ponds de mani√®re d√©taill√©e mais accessible, avec du vocabulaire technique de base expliqu√©. √âquilibre entre pr√©cision et clart√©.",
        expert: "R√©ponds de mani√®re technique et pr√©cise, en utilisant le vocabulaire sp√©cialis√© appropri√©. Assume que l'utilisateur a des connaissances avanc√©es.",
        hybrid: "R√©ponds de mani√®re experte mais ajoute des analogies ou des exemples concrets pour faciliter la compr√©hension. Combine pr√©cision technique et p√©dagogie.",
        hybridExpert: "R√©ponds de mani√®re tr√®s technique et compl√®te avec tous les d√©tails n√©cessaires, mais ajoute syst√©matiquement des explications simples et des analogies du quotidien."
      };

      // D√©tecter le type de question automatiquement
      const questionType = this.detectQuestionType(question, courseContent);

      let prompt;

      if (questionType === 'course-related' && courseContent) {
        // Question li√©e au cours
        prompt = `Contexte du cours :
${courseContent}

Question : ${question}

R√©ponds dans un style conversationnel naturel (comme ChatGPT/Claude) :
- Ton bienveillant et expert
- Paragraphes courts et clairs
- Utilise des √©mojis si appropri√© (üí° ‚ú® üéØ)
- Adapte le niveau : ${levelInstructions[level]}
- Maximum 150 mots pour rester concis

R√©ponse :`;

      } else {
        // Question g√©n√©rale - TOUJOURS r√©pondre
        prompt = `Tu es un assistant p√©dagogique expert.

Question : ${question}

R√©ponds dans un style conversationnel moderne :
- Ton naturel et engageant
- Explications claires et accessibles
- Utilise des √©mojis pour structurer si pertinent
- Niveau : ${levelInstructions[level]}
- Maximum 150 mots

R√©ponse :`;
      }

      const response = await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 180,
        temperature: 0.7,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      return {
        answer: response.content[0].text,
        questionType,
        level
      };
    } catch (error) {
      const code = this.categorizeError(error);
      logger.error('Erreur r√©ponse question', { code, error });
      if (code === ERROR_CODES.IA_ERROR) {
        this.offline = true;
        const err = new Error(this.getOfflineMessage());
        err.code = code;
        err.offline = true;
        throw err;
      }
      const err = new Error('Erreur lors de la g√©n√©ration de la r√©ponse');
      err.code = code;
      throw err;
    }
  }

  // Fonction pour d√©tecter le type de question
  detectQuestionType(question, courseContent) {
    if (!courseContent) {
      return 'general';
    }

    // Mots-cl√©s qui indiquent EXPLICITEMENT une question li√©e au cours
    const courseKeywords = [
      'dans ce cours', 'selon le cours', 'dans la le√ßon', 'le cours dit',
      'mentionn√© dans', 'vu plus haut', 'cette section', 'ce chapitre',
      'explique cette partie', 'pr√©cise ce point', 'd√©taille cette section',
      'approfondir ce sujet du cours', 'peux-tu d√©velopper'
    ];

    // Mots-cl√©s qui indiquent CLAIREMENT une question g√©n√©rale
    const generalKeywords = [
      "qu'est-ce que", "c'est quoi", "comment fonctionne", "pourquoi", 
      "quand", "o√π", "qui", "peux-tu m'expliquer", "explique-moi", 
      "parle-moi de", "que sais-tu sur", "donne-moi des exemples de",
      "diff√©rence entre", "comment faire", "qu'est-ce qui", "dis-moi",
      "raconte-moi", "je voudrais savoir", "peux-tu me dire"
    ];

    const questionLower = question.toLowerCase();
    
    // PREMI√àRE V√âRIFICATION : Mots-cl√©s explicites du cours
    const hasCourseKeywords = courseKeywords.some(keyword => 
      questionLower.includes(keyword)
    );

    // DEUXI√àME V√âRIFICATION : Mots-cl√©s g√©n√©raux
    const hasGeneralKeywords = generalKeywords.some(keyword => 
      questionLower.includes(keyword)
    );

    // TROISI√àME V√âRIFICATION : Analyse contextuelle plus fine
    const courseWords = courseContent.toLowerCase().split(/\s+/);
    const questionWords = questionLower.split(/\s+/);
    
    // Filtrer les mots communs (articles, pr√©positions, etc.)
    const commonWords = ['le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'et', 'ou', 'mais', 'donc', 'car', 'ni', 'or'];
    const meaningfulQuestionWords = questionWords.filter(word => 
      word.length > 3 && !commonWords.includes(word)
    );
    
    const sharedWords = meaningfulQuestionWords.filter(word => 
      courseWords.includes(word)
    );

    // LOGIQUE DE D√âCISION AM√âLIOR√âE
    if (hasCourseKeywords) {
      return 'course-related';
    } else if (hasGeneralKeywords) {
      return 'general';
    } else if (sharedWords.length >= 3) {
      // Beaucoup de mots en commun = probablement li√© au cours
      return 'course-related';
    } else {
      // Par d√©faut, traiter comme une question g√©n√©rale
      return 'general';
    }
  }

  // G√©n√©rer un quiz
  async generateQuiz(courseContent) {
    if (this.offline) {
      return { questions: [] };
    }
    try {
      const prompt = `Bas√© sur ce cours :
${courseContent}

Cr√©e un quiz de 5 questions √† choix multiples (QCM) pour tester la compr√©hension.

Format JSON requis :
{
  "questions": [
    {
      "question": "Texte de la question",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct": 0,
      "explanation": "Explication de la bonne r√©ponse"
    }
  ]
}

Assure-toi que les questions couvrent les points cl√©s du cours et que les r√©ponses incorrectes sont plausibles.`;

      const response = await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 2000,
        temperature: 0.2,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      // Extraire le JSON de la r√©ponse
      const content = response.content[0].text;
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const quizData = JSON.parse(jsonMatch[0]);
        return quizData;
      } else {
        throw new Error('Format de r√©ponse invalide');
      }
    } catch (error) {
      const code = this.categorizeError(error);
      logger.error('Erreur g√©n√©ration quiz', { code, error });
      if (code === ERROR_CODES.IA_ERROR) {
        this.offline = true;
        const err = new Error(this.getOfflineMessage());
        err.code = code;
        err.offline = true;
        throw err;
      }
      const err = new Error('Erreur lors de la g√©n√©ration du quiz');
      err.code = code;
      throw err;
    }
  }

  async generateOnDemandQuiz(subject, level = 'intermediate', questionCount = 5) {
    if (this.offline) {
      return [];
    }
    try {
      const levelInstructions = {
        beginner: "R√©ponds de mani√®re tr√®s simple, sans jargon technique, comme si tu t'adressais √† un d√©butant complet. Utilise des analogies simples et du vocabulaire accessible.",
        intermediate: "R√©ponds de mani√®re d√©taill√©e mais accessible, avec du vocabulaire technique de base expliqu√©. √âquilibre entre pr√©cision et clart√©.",
        expert: "R√©ponds de mani√®re technique et pr√©cise, en utilisant le vocabulaire sp√©cialis√© appropri√©. Assume que l'utilisateur a des connaissances avanc√©es.",
        hybrid: "R√©ponds de mani√®re experte mais ajoute des analogies ou des exemples concrets pour faciliter la compr√©hension. Combine pr√©cision technique et p√©dagogie.",
        hybridExpert: "R√©ponds de mani√®re tr√®s technique et compl√®te avec tous les d√©tails n√©cessaires, mais ajoute syst√©matiquement des explications simples et des analogies du quotidien."
      };

      const prompt = `Tu es un expert p√©dagogique. G√©n√®re un quiz de ${questionCount} questions √† choix multiples sur le sujet suivant :
"${subject}"

Niveau de vulgarisation : ${levelInstructions[level]}

Format JSON attendu :
{
  "questions": [
    {
      "question": "Texte de la question",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct": 0,
      "explanation": "Explication de la bonne r√©ponse"
    }
  ]
}

Assure-toi que les questions couvrent les points cl√©s du sujet et que les r√©ponses incorrectes sont plausibles.`;

      const response = await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 3000,
        temperature: 0.2,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      const content = response.content[0].text;
      const jsonMatch = content.match(/\{[\s\S]*\}/);

      if (jsonMatch) {
        const quizData = JSON.parse(jsonMatch[0]);
        return quizData.questions;
      } else {
        throw new Error('Format de r√©ponse invalide');
      }
    } catch (error) {
      const code = this.categorizeError(error);
      logger.error('Erreur g√©n√©ration quiz √† la demande', { code, error });
      if (code === ERROR_CODES.IA_ERROR) {
        this.offline = true;
        const err = new Error(this.getOfflineMessage());
        err.code = code;
        err.offline = true;
        throw err;
      }
      const err = new Error('Erreur lors de la g√©n√©ration du quiz √† la demande');
      err.code = code;
      throw err;
    }
  }

  // Sugg√©rer des questions
  async suggestQuestions(courseContent, level = 'intermediate') {
    if (this.offline) {
      return [];
    }
    try {
      const prompt = `Bas√© sur ce cours :
${courseContent}

G√©n√®re 3 questions pertinentes que l'utilisateur pourrait poser pour approfondir sa compr√©hension. 
Niveau : ${level}

Format JSON :
{
  "questions": [
    "Question 1 ?",
    "Question 2 ?",
    "Question 3 ?"
  ]
}`;

      const response = await this.sendWithTimeout({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 500,
        temperature: 0.8,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      // Extraire le JSON de la r√©ponse
      const content = response.content[0].text;
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const suggestionsData = JSON.parse(jsonMatch[0]);
        return suggestionsData.questions;
      } else {
        throw new Error('Format de r√©ponse invalide');
      }

    } catch (error) {
      const code = this.categorizeError(error);
      logger.error('Erreur suggestions questions', { code, error });
      if (code === ERROR_CODES.IA_ERROR) {
        this.offline = true;
        const err = new Error(this.getOfflineMessage());
        err.code = code;
        err.offline = true;
        throw err;
      }
      const err = new Error('Erreur lors de la g√©n√©ration des suggestions');
      err.code = code;
      throw err;
    }
  }

  // Obtenir un sujet al√©atoire (optionnel)
  getRandomSubject(category = null) {
    try {
      const serverSubjects = {
        physique: [
          "Pourquoi E=mc¬≤ a r√©volutionn√© le monde",
          "Comment votre GPS utilise la relativit√© d'Einstein",
          "Les trous noirs et la relativit√© g√©n√©rale",
          "La m√©canique quantique et le principe d'incertitude",
          "La physique quantique sans les maths compliqu√©es"
        ],
        mathematiques: [
          "Le myst√®re des nombres premiers expliqu√© simplement",
          "Les bases de l'arithm√©tique et des nombres premiers",
          "La g√©om√©trie euclidienne expliqu√©e simplement",
          "Statistiques de base et leur importance",
          "Introduction aux concepts de topologie"
        ],
        biologie: [
          "Pourquoi les vaccins fonctionnent : immunologie 101",
          "L'√©volution et la s√©lection naturelle",
          "La structure de l'ADN et la g√©n√©tique",
          "Les neurones et le fonctionnement du cerveau",
          "La neuroplasticit√© et l'apprentissage"
        ],
        terre: [
          "Le r√©chauffement climatique et ses causes",
          "La th√©orie de la d√©rive des continents",
          "Les propri√©t√©s de l'eau et son cycle naturel",
          "Le climat et son impact sur les soci√©t√©s",
          "Fondements de la g√©ologie et des tremblements de terre"
        ],
        appliees: [
          "Principes de base de l'ing√©nierie √©lectrique",
          "Informatique th√©orique : algorithmes et complexit√©",
          "Introduction aux √©nergies renouvelables",
          "Les principes de la cybers√©curit√©",
          "Informatique quantique et ses applications"
        ]
      };

      let selectedCategory;
      let availableSubjects;

      if (category && serverSubjects[category]) {
        selectedCategory = category;
        availableSubjects = serverSubjects[category];
      } else {
        // S√©lectionner une cat√©gorie al√©atoire
        const categories = Object.keys(serverSubjects);
        selectedCategory = categories[Math.floor(Math.random() * categories.length)];
        availableSubjects = serverSubjects[selectedCategory];
      }

      // S√©lectionner un sujet al√©atoire
      const randomSubject = availableSubjects[Math.floor(Math.random() * availableSubjects.length)];

      return {
        subject: randomSubject,
        category: selectedCategory,
        totalSubjects: availableSubjects.length
      };

    } catch (error) {
      logger.error('Erreur g√©n√©ration sujet al√©atoire', error);
      throw new Error('Erreur lors de la g√©n√©ration du sujet al√©atoire');
    }
  }

  // Obtenir toutes les cat√©gories disponibles
  getSubjectCategories() {
    try {
      const serverSubjects = {
        physique: 5,
        mathematiques: 5,
        biologie: 5,
        terre: 5,
        appliees: 5
      };

      return {
        categories: Object.keys(serverSubjects),
        stats: serverSubjects
      };

    } catch (error) {
      logger.error('Erreur r√©cup√©ration cat√©gories', error);
      throw new Error('Erreur lors de la r√©cup√©ration des cat√©gories');
    }
  }

  // D√©terminer le code d'erreur selon la r√©ponse de l'API Anthropic
  categorizeError(error) {
    if (error?.response?.status === 529 || error?.response?.data?.type === 'overloaded_error') {
      return ERROR_CODES.IA_OVERLOADED;
    }
    if (error?.response?.status === 429) {
      return ERROR_CODES.QUOTA_EXCEEDED;
    }
    const message = error?.message?.toLowerCase() || '';
    if (
      error?.name === 'AbortError' ||
      error?.name === 'APIUserAbortError' ||
      error?.code === 'ETIMEDOUT' ||
      message.includes('timeout') ||
      message.includes('abort')
    ) {
      return ERROR_CODES.IA_TIMEOUT;
    }
    return ERROR_CODES.IA_ERROR;
  }
}

module.exports = new AnthropicService();
