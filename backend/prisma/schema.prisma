generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String?
  avatar        String?
  googleId      String?       @unique
  provider      String        @default("email")
  
  // üÜï CHAMPS ONBOARDING HARMONIS√âS
  vulgarization      String?
  teacherType        String?
  duration           String?
  interests          Json?
  learningContext    String?
  usageFrequency     String?
  onboardingCompleted Boolean   @default(false)
  profileConfidence  Float?    @default(0.0)
  lastProfileUpdate  DateTime?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations existantes
  chatHistories ChatHistory[]
  courses       Course[]
  quizzes       Quiz[]
  
  // üÜï NOUVELLE RELATION
  userData      UserData[]
  
  @@map("users")
}

// üÜï NOUVEAU MOD√àLE - Donn√©es flexibles
model UserData {
  id        String   @id @default(cuid())
  userId    String
  key       String   // "preferred_domains", "learning_pace", "difficulty_preference", etc.
  value     Json     // Stockage flexible : string, array, object
  category  String?  // "onboarding", "preferences", "analytics", "behavior"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key]) // Un seul "preferred_domains" par user
  @@index([userId, category])
  @@map("user_data")
}

model Course {
  id                 String   @id @default(cuid())
  subject            String
  content            String   @db.Text
  
  // Anciens champs (gard√©s temporairement)
  detailLevel        Int?
  vulgarizationLevel Int?
  style              String?   // ‚Üê Rendre optionnel
  intent             String?   // ‚Üê Rendre optionnel
  
  // NOUVEAUX champs
  vulgarization      String?   // ‚Üê NOUVEAU
  teacherType        String?   // ‚Üê CORRIG√â: camelCase au lieu de snake_case
  
  duration           String
  createdAt          DateTime @default(now())
  
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chatHistories      ChatHistory[]
  quizzes           Quiz[]
  @@map("courses")
  @@index([userId, createdAt])
}

model ChatHistory {
  id        String   @id @default(cuid())
  messages  Json
  createdAt DateTime @default(now())
  userId    String
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("chat_histories")
}

model Quiz {
  id        String   @id @default(cuid())
  subject   String
  level     String
  type      String   @default("ondemand")
  questions Json
  createdAt DateTime @default(now())
  userId    String
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, createdAt])
  @@index([userId, type])
  @@map("quizzes")
}