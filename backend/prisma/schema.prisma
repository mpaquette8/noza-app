// backend/prisma/schema.prisma
// REMPLACE le contenu actuel par celui-ci

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?  // ‚Üê Devient optionnel pour les comptes Google
  avatar    String?  // ‚Üê Nouveau : URL de la photo de profil Google
  googleId  String?  @unique // ‚Üê Nouveau : ID Google unique
  provider  String   @default("email") // ‚Üê Nouveau : "email" ou "google"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courses      Course[]
  chatHistories ChatHistory[]
  quizzes      Quiz[]        // üëà NOUVELLE LIGNE
  
  @@map("users")
}

model Course {
  id                 String   @id @default(cuid())
  subject            String
  content            String   @db.Text
  /// @deprecated Use style, duration, and intent instead
  detailLevel        Int?
  /// @deprecated Use style, duration, and intent instead
  vulgarizationLevel Int?
  style              String
  duration           String
  intent             String
  createdAt          DateTime @default(now())
  
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chatHistories      ChatHistory[]
  quizzes           Quiz[]        // üëà NOUVELLE LIGNE

  @@map("courses")
  @@index([userId, createdAt])
}

model ChatHistory {
  id        String   @id @default(cuid())
  messages  Json
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("chat_histories")
}

// üëà NOUVEAU MOD√àLE - AJOUTER √Ä LA FIN
model Quiz {
  id          String   @id @default(cuid())
  subject     String   // "Photosynth√®se", "Histoire de France", etc.
  level       String   // "beginner", "intermediate", "expert", "hybrid"
  type        String   @default("ondemand") // "course", "ondemand", "review"
  questions   Json     // Stockage des questions/r√©ponses/explications
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId    String?  // Optionnel - li√© √† un cours sp√©cifique
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: SetNull)
  
  @@map("quizzes")
  @@index([userId, createdAt])
  @@index([userId, type])
}