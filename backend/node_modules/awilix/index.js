class Registration {
  constructor(resolver) {
    this.resolver = resolver;
    this.lifetime = 'transient';
    this.cache = null;
  }
  resolve(container) {
    if (this.lifetime === 'singleton') {
      if (this.cache === null) {
        this.cache = this.resolver(container);
      }
      return this.cache;
    }
    return this.resolver(container);
  }
  singleton() {
    this.lifetime = 'singleton';
    return this;
  }
  scoped() {
    this.lifetime = 'scoped';
    return this;
  }
  transient() {
    this.lifetime = 'transient';
    return this;
  }
}

class Container {
  constructor() {
    this.registrations = {};
  }
  register(defs) {
    Object.assign(this.registrations, defs);
  }
  resolve(name) {
    const reg = this.registrations[name];
    if (!reg) {
      throw new Error(`Dependency '${name}' not registered`);
    }
    return reg.resolve(this);
  }
  get cradle() {
    return new Proxy({}, {
      get: (_, key) => this.resolve(key)
    });
  }
}

function createContainer() {
  return new Container();
}

function asFunction(fn) {
  return new Registration((container) => fn(container.cradle));
}

function asValue(value) {
  return new Registration(() => value).singleton();
}

module.exports = { createContainer, asFunction, asValue };
